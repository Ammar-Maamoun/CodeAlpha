

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, accuracy_score

# Importing the dataset
dataset = pd.read_csv('german_credit_data.csv')
"""

# Taking care of missing data
# Replace "?" with np.nan in the specified columns
columns_to_check = ["Saving accounts", "Checking account"]
dataset[columns_to_check] = dataset[columns_to_check].replace("NA", np.nan)

# Drop rows with missing values in specified columns
dataset_cleaned = dataset.dropna(subset=columns_to_check)

 #Display the cleaned dataset
#print(dataset_cleaned)
"""
# Extract X and y
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

imputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')
imputer.fit(X[:, 5:7])
X[:, 5:7] = imputer.transform(X[:, 5:7])
print(X)

# Specify the indices of the columns to be encoded
columns_to_encode = [2, 4, 5, 6, 9]

# Create a OneHotEncoder for each column and apply the transformation to X
# Create a dictionary to store OneHotEncoders for each column
# Create a LabelEncoder for each column and apply the transformation to X
label_encoders = {}

for col in columns_to_encode:
    le = label_encoders.get(col, LabelEncoder())
    X[:, col] = le.fit_transform(X[:, col].astype(str))
    label_encoders[col] = le


# Print the modified X
print(X)


# Encoding the Dependent Variable
le = LabelEncoder()
y = le.fit_transform(y)
print(y)

# Splitting the dataset into the Training set and Test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)
print(X_train)
print(y_train)
print(X_test)
print(y_test)





# Training the Decision Tree Classification model on the Training set
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 100, criterion = "entropy", random_state =42)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)


cm = confusion_matrix(y_test, y_pred)
print(cm)
p=accuracy_score(y_test, y_pred)
print(p)
